type Query {
  me: User!
  users: [User!]!
  user(id: ID!): User!
  groups: [Group!]!
  group(id: ID!): Group!
  tournaments: [Tournament!]!
  tournament(id: ID!): Tournament!
  competators: [Competator!]!
  competator(id: ID!): Competator!
  matchs: [Match!]!
  match(id: ID!): Match!
}
type Mutation {
  signup(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  updateUser(id: ID!, email: String!, name: String): User!
  deleteUser(id: ID!): User!

  #Competator
  createCompetator(groupId: ID!): Competator!
  updateCompetator(groupId: ID!): Competator!
  #Group
  createGroup(name: String, tournamentId: ID!): Group!

  #Tournament
  createTournament(title: String!): Tournament!

  #Match
  createMatch(userId: ID!, groupId: ID): Match!
  updateMatch(userId: ID, matchId: ID!): Match!
  finishMatch(matchId: ID!, finished: Boolean, winnerId: ID): Match!
}
scalar DateTime

type User {
  id: ID!
  email: String!
  name: String
  createdAt: DateTime
  competators: [Competator]
}

type AuthPayload {
  token: String
  user: User
}
type Competator {
  id: ID!
  createdAt: DateTime
  user: User
  group: Group
  point: Int
  matchs: [Match]
}
type Group {
  id: ID!
  name: String
  tournament: Tournament
  competators: [Competator]
  matchs: [Match]
}
type Tournament {
  id: ID!
  title: String!
  createdAt: DateTime
  groups: [Group]
}

type Match {
  id: ID!
  competators: [Competator]
  finished: Boolean
  group: Group
  winnerId: ID!
}
